import java.util.HashMap;
import java.util.HashSet;

public class Automata {
    private HashMap<Integer, State> states;
    private HashSet<Integer> finalStates;
    private HashSet<Transition> transitions;
    private State startState;
    private static int startStateLimit = 0;

    public Automata() {
        states = new HashMap<>();
        finalStates = new HashSet<>();
        transitions = new HashSet<>();
    }

    public void setState(int id) {
        states.put(id, new State(id));
    }

    public void setFinalState(int id) {
        finalStates.add(id);
    }

    public void setStartState(int id) {
        startState = states.get(id);
    }

    public void setTransition(int originId, int destinyId, String symbol) {
        State origin = states.get(originId);
        State destiny = states.get(destinyId);
        transitions.add(new Transition(origin, destiny, symbol));
    }

    public Transition getTransition(int originId, String symbol) {
        State origin = states.get(originId);
        for (Transition transition : transitions) {
            if (transition.getOrigin().equals(origin) && transition.getSymbol().equals(symbol)) {
                return transition;
            }
        }
        return null;
    }

    public State getStartState() {
        return startState;
    }

    public State getFinalState(int id) {
        return states.get(id);
    }

    public int getFinalStateSize() {
        return finalStates.size();
    }

    public State getState(int id) {
        return states.get(id);
    }

    public boolean isStartState(int id) {
        return startState.getId() == id;
    }

    public boolean isFinalState(int id) {
        return finalStates.contains(id);
    }

    private void message(String msg) {
        // Implement your message logic here
    }
}